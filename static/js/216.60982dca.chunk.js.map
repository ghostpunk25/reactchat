{"version":3,"file":"static/js/216.60982dca.chunk.js","mappings":"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","sources":["components/Modal/Modal.style.jsx","components/Modal/Modal.jsx","pages/Chat/Chat.style.jsx","img/common/chatBtnBig.svg","pages/Chat/Chat.jsx"],"sourcesContent":["import { Dialog, Button, styled } from '@mui/material';\r\n\r\nexport const ModalScreen = styled(Dialog)(() => ({\r\n   '& .css-1t1j96h-MuiPaper-root-MuiDialog-paper, & .css-uhb5lp': {\r\n      borderRadius: '20px',\r\n      flex: '0 1 304px',\r\n      padding: '14px 37px 41px',\r\n   }\r\n}));\r\n\r\nexport const PinkButton = styled(Button)`\r\nbackground-color: ${p => p.theme.palette.colors.button};\r\npadding: 14.5px 24px;\r\nfont-weight: ${p => p.theme.typography.fontWeights.extraBold};\r\nfont-size: 18px;\r\nline-height: 24px;\r\nborder-radius: 100px;\r\ntext-transform: none;\r\ncolor:#fff;\r\nwidth: 100%;\r\n&:hover{\r\n   background-color: #892a5f !important;\r\n}\r\n`\r\nexport const BorderButton = styled(Button)`\r\nborder: 2px solid  ${p => p.theme.palette.colors.button};\r\npadding: 12.5px 22px;\r\nfont-weight: ${p => p.theme.typography.fontWeights.extraBold};\r\nfont-size: 18px;\r\nline-height: 24px;\r\nborder-radius: 100px;\r\ntext-transform: none;\r\ncolor: ${p => p.theme.palette.colors.button};\r\nwidth: 100%;\r\nmargin: 0px;\r\n&:hover{\r\n   background-color: #892a5f !important;\r\n}\r\n`\r\n\r\nexport const BtnClose = styled('span')`\r\n   width: 18px;\r\n   height: 18px;\r\n   position: relative;\r\n   &:before {\r\n      content: '';\r\n      width: 2px;\r\n      height: 20px;\r\n      background: #B2BBA3;\r\n      position: absolute;\r\n      top: 0%;\r\n      left: 50%;\r\n      transform: rotate(-45deg);\r\n   }\r\n   &:after {\r\n      content: '';\r\n      width: 2px;\r\n      height: 20px;\r\n      background: #B2BBA3;\r\n      position: absolute;\r\n      top: 0%;\r\n      left: 50%;\r\n      transform: rotate(45deg);\r\n   }\r\n`","import { Button, DialogContent, DialogContentText, DialogTitle, Box, useTheme } from '@mui/material';\r\nimport { ModalScreen, PinkButton, BorderButton, BtnClose } from './Modal.style';\r\n\r\nexport const Modal = ({ modalOpen, handleClose, profileBlock }) => {\r\n   const theme = useTheme();\r\n\r\n   return (\r\n      <div>\r\n         <ModalScreen\r\n            open={modalOpen}\r\n            onClose={() => handleClose(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n         >\r\n            <Button onClick={() => handleClose(false)}\r\n               sx={{\r\n                  mb: '16px',\r\n                  p: '0px',\r\n                  justifyContent: 'flex-end',\r\n                  alignSelf: 'flex-end',\r\n                  minWidth: '18px',\r\n                  transform: 'translate(20px, 0px)'\r\n               }}>\r\n               <BtnClose></BtnClose>\r\n            </Button>\r\n            <DialogTitle id=\"alert-dialog-title\"\r\n               sx={{\r\n                  mb: '14px',\r\n                  fontWeight: theme.typography.fontWeights.extraBold,\r\n                  fontSize: '18px',\r\n                  lineHeight: '24px',\r\n                  textAlign: 'center',\r\n                  p: '0px',\r\n               }}>\r\n               Are you sure you want to block this user?\r\n            </DialogTitle>\r\n            <DialogContent\r\n               sx={{\r\n                  mb: '14px',\r\n                  p: '0px',\r\n               }}>\r\n               <DialogContentText id=\"alert-dialog-description\"\r\n                  sx={{\r\n                     lineHeight: '24px',\r\n                     color: '#000',\r\n                     textAlign: 'center',\r\n                  }}>\r\n                  This user will be added to   your blocklist\r\n               </DialogContentText>\r\n            </DialogContent>\r\n            <Box\r\n               sx={{\r\n                  display: 'flex',\r\n                  gap: '18px',\r\n                  flexDirection: 'column',\r\n                  width: '100%',\r\n                  mx: 'auto',\r\n               }}>\r\n               <PinkButton onClick={profileBlock}>Block</PinkButton>\r\n               <BorderButton onClick={() => handleClose(false)} >Cancel</BorderButton>\r\n            </Box>\r\n         </ModalScreen>\r\n      </div >\r\n   );\r\n};","import { Badge, Box, styled } from '@mui/material';\r\n\r\nexport const StyledBadgeOn = styled(Badge)(() => ({\r\n   '& .MuiBadge-badge': {\r\n      backgroundColor: '#44b700',\r\n   },\r\n}));\r\n\r\nexport const StyledBadgeOff = styled(Badge)(() => ({\r\n   '& .MuiBadge-badge': {\r\n      backgroundColor: 'red',\r\n   },\r\n}));\r\n\r\nexport const Border = styled(Box)`\r\ndisplay: flex;\r\nflex-direction: column;\r\nposition: relative;\r\nheight: 100%;\r\n&:before{\r\n   content: '';\r\n   position: absolute;\r\n   top: 90px;\r\n   left: 0px;\r\n   width: 100%;\r\n   height: 2px;\r\n   background: #BEC7AF;\r\n}\r\n&:after{\r\n   content: '';\r\n   position: absolute;\r\n   bottom: 100px;\r\n   left: 0px;\r\n   width: 100%;\r\n   height: 2px;\r\n   background: #BEC7AF;\r\n}\r\n`","var _circle, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgChatBtnBig(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 51,\n    height: 51,\n    viewBox: \"0 0 51 51\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 25.5,\n    cy: 25.5,\n    r: 25.5,\n    fill: \"#E5218F\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.8281 15.6732L26.0167 40.8001C26.2592 41.3462 27.0407 41.323 27.2324 40.7648L29.8503 33.126C29.9155 32.9341 29.8885 32.7213 29.7749 32.5495L25.9397 26.7633C25.5495 26.1756 26.2213 25.4836 26.8205 25.8555L32.7906 29.5625C32.9563 29.6653 33.1583 29.6897 33.341 29.6302L40.7339 27.2127C41.2988 27.0277 41.3278 26.2388 40.7783 25.9945L15.6817 14.8196C15.1347 14.5762 14.5847 15.1262 14.8281 15.6732Z\",\n    fill: \"white\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgChatBtnBig);\nexport default __webpack_public_path__ + \"static/media/chatBtnBig.411e3ce2623c73c06e863b2334439551.svg\";\nexport { ForwardRef as ReactComponent };","import { Box, Container, Avatar, Button, useTheme } from '@mui/material';\r\nimport { useContext, useState } from 'react';\r\nimport { context } from 'context/context';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useEffect } from 'react';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Modal } from 'components/Modal/Modal';\r\nimport { StyledBadgeOn, StyledBadgeOff, Border } from './Chat.style';\r\nimport chatBtnBig from 'img/common/chatBtnBig.svg';\r\n\r\nexport const Chat = () => {\r\n   const theme = useTheme();\r\n   const [modal, setModal] = useState(false);\r\n   const navigate = useNavigate();\r\n   const ctx = useContext(context);\r\n   const { register, handleSubmit, resetField } = useForm();\r\n   const onSubmit = data => {\r\n      resetField(\"user\")\r\n      ctx.getChat({ ...ctx.profileChat, chat: [data] });\r\n   };\r\n   const [index, setIndex] = useState(null);\r\n\r\n   const profileBlock = () => {\r\n      ctx.blockProfilesList(ctx.profileChat.id);\r\n      setModal(false);\r\n      navigate('/catalog');\r\n   }\r\n\r\n   const handleClickOpen = () => {\r\n      setModal(true);\r\n   };\r\n\r\n   const handleClose = close => {\r\n      setModal(close);\r\n   };\r\n\r\n\r\n   useEffect(() => {\r\n      let message\r\n\r\n      if (ctx.profileChat) {\r\n         const index = ctx.allChats.findIndex(item => item.id === ctx.profileChat.id)\r\n         setIndex(index)\r\n\r\n         if (ctx.profileChat.online === true && index === -1) {\r\n            setIndex(null)\r\n            message = setTimeout(() => {\r\n               ctx.getChat({ ...ctx.profileChat, chat: [{ profile: 'Hi sweety! I’m boring...' }] })\r\n            }, 2000);\r\n         };\r\n      };\r\n\r\n      window.localStorage.setItem('allChats', JSON.stringify(ctx.allChats));\r\n      window.localStorage.setItem('profileChat', JSON.stringify(ctx.profileChat));\r\n\r\n      ctx.getChatFooter(true);\r\n\r\n      return () => clearTimeout(message);\r\n   }, [ctx.allChats]);\r\n\r\n   return (\r\n      <Border>\r\n         <Container maxWidth=\"md\"\r\n            sx={{\r\n               display: 'flex',\r\n               flexDirection: 'column',\r\n               flex: '1 1 auto',\r\n               px: '18px',\r\n            }}>\r\n            <Box\r\n               sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '10px',\r\n                  justifyContent: 'space-between',\r\n                  pb: '30px',\r\n                  mb: '29px'\r\n               }}>\r\n               <Box\r\n                  sx={{\r\n                     display: 'flex',\r\n                     alignItems: 'center',\r\n                     gap: '13px'\r\n                  }}>\r\n                  {ctx.profileChat.online\r\n                     ? <StyledBadgeOn\r\n                        overlap=\"circular\"\r\n                        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                        variant=\"dot\"\r\n                     >\r\n                        <Avatar alt=\"Remy Sharp\" src={ctx.profileChat.img}\r\n                           sx={{\r\n                              width: '60px',\r\n                              height: '60px'\r\n                           }} />\r\n                     </StyledBadgeOn>\r\n                     : <StyledBadgeOff\r\n                        overlap=\"circular\"\r\n                        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                        variant=\"dot\"\r\n                     >\r\n                        <Avatar alt=\"Remy Sharp\" src={ctx.profileChat.img}\r\n                           sx={{\r\n                              width: '60px',\r\n                              height: '60px'\r\n                           }} />\r\n                     </StyledBadgeOff>\r\n                  }\r\n                  <Box component='p'\r\n                     sx={{\r\n                        fontWeight: theme.typography.fontWeights.extraBold,\r\n                        lineHeight: '22px',\r\n                        letterSpacing: '0.5px'\r\n                     }}>\r\n                     {ctx.profileChat.name}\r\n                  </Box>\r\n               </Box>\r\n               <Button onClick={handleClickOpen}\r\n                  sx={{\r\n                     textTransform: 'none',\r\n                     color: theme.palette.colors.button,\r\n                     fontWeight: theme.typography.fontWeights.extraBold,\r\n                     lineHeight: '22px',\r\n                     letterSpacing: '0.5px'\r\n                  }}>\r\n                  Block\r\n               </Button>\r\n            </Box>\r\n            <Box sx={{ flex: '1 1 100%', }}>\r\n               <Box\r\n                  sx={{\r\n                     maxHeight: '45vh',\r\n                     display: 'flex',\r\n                     flexDirection: 'column',\r\n                     gap: '29px',\r\n                     pb: '20px',\r\n                     overflow: 'auto'\r\n                  }}>\r\n                  {ctx.allChats.length !== 0\r\n                     ? ctx.allChats[index]?.chat.map(({ profile }) => profile && (\r\n                        <Box key={`${Math.random()}_${profile}`}\r\n                           sx={{\r\n                              display: 'flex',\r\n                              gap: '10px'\r\n                           }}>\r\n                           <Avatar alt=\"Remy Sharp\" src={ctx.profileChat.img}\r\n                              sx={{\r\n                                 width: '42px',\r\n                                 height: '42px'\r\n                              }} />\r\n                           <Box\r\n                              sx={{\r\n                                 background: '#F7BBDD',\r\n                                 borderRadius: '0px 15px 15px 15px',\r\n                                 p: '10px 18px',\r\n                                 display: 'inline-flex',\r\n                                 alignSelf: 'flex-start'\r\n                              }}>\r\n                              {profile}\r\n                           </Box>\r\n                        </Box>\r\n                     ))\r\n                     : null\r\n                  }\r\n                  {ctx.allChats.length !== 0\r\n                     ? ctx.allChats[index]?.chat.map(({ user }) => user && (\r\n                        <Box key={`${Math.random()}_${user}`}\r\n                           sx={{\r\n                              background: '#DEEACB',\r\n                              borderRadius: '15px 0px 15px 15px',\r\n                              p: '10px 18px',\r\n                              display: 'inline-flex',\r\n                              alignSelf: 'flex-end'\r\n                           }}>\r\n                           {user}\r\n                        </Box>\r\n                     ))\r\n                     : null\r\n                  }\r\n               </Box>\r\n            </Box>\r\n            <Box component='form' onSubmit={handleSubmit(onSubmit)}\r\n               sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '2px',\r\n                  py: '20px'\r\n               }}>\r\n               <Box component='input' placeholder='Enter your message' {...register(\"user\", { required: true, })}\r\n                  sx={{\r\n                     width: '100%',\r\n                     padding: '11.5px 18px',\r\n                     background: 'none',\r\n                     border: '2px solid #828282',\r\n                     borderRadius: '100px',\r\n                     fontSize: '18px',\r\n                     lineHeight: '24px',\r\n                  }} />\r\n               <Button type=\"submit\">\r\n                  <img src={chatBtnBig} alt=\"chatBtnBig\" />\r\n               </Button>\r\n            </Box>\r\n         </Container>\r\n         <Modal modalOpen={modal} handleClose={handleClose} profileBlock={profileBlock} />\r\n      </Border >\r\n   );\r\n};"],"names":["ModalScreen","styled","Dialog","borderRadius","flex","padding","PinkButton","Button","_templateObject","_taggedTemplateLiteral","p","theme","palette","colors","button","typography","fontWeights","extraBold","BorderButton","_templateObject2","BtnClose","_templateObject3","Modal","_ref","modalOpen","handleClose","profileBlock","useTheme","_jsx","children","_jsxs","open","onClose","onClick","sx","mb","justifyContent","alignSelf","minWidth","transform","DialogTitle","id","fontWeight","fontSize","lineHeight","textAlign","DialogContent","DialogContentText","color","Box","display","gap","flexDirection","width","mx","StyledBadgeOn","Badge","backgroundColor","StyledBadgeOff","Border","Chat","_ctx$allChats$index","_ctx$allChats$index2","_useState","useState","_useState2","_slicedToArray","modal","setModal","navigate","useNavigate","ctx","useContext","context","_useForm","useForm","register","handleSubmit","resetField","_useState3","_useState4","index","setIndex","useEffect","message","profileChat","allChats","findIndex","item","online","setTimeout","getChat","_objectSpread","chat","profile","window","localStorage","setItem","JSON","stringify","getChatFooter","clearTimeout","Container","maxWidth","px","alignItems","pb","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","alt","src","img","height","component","letterSpacing","name","textTransform","maxHeight","overflow","length","map","background","concat","Math","random","_ref2","user","onSubmit","data","py","placeholder","required","border","type","chatBtnBig","close","blockProfilesList"],"sourceRoot":""}